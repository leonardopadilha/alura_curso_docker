docker run <imagem>
docker ps / docker container ls --> exibe quais containers estão em execução
docker ps -a / docker container ls -a --> exibe os containers que estão ou os que estiveram em execução
docker stop id-container / imagem --> Para a execução do container informado através do id
docker start id-container / imagem --> Recriar / Reexecutar o container informado através do id
docker exec -it id-container / imagem bash --> Cria o container no modo interativo, desse modo é possível executar algum comando via terminal
docker pause id-container / imagem --> Pausa o container
docker unpause id-container / imagem --> Retira a pausa do container
docker stop -t=0 id-container / imagem --> Para o container instantaneamente
docker rm id-container / imagem --> Remove o container
docker run -d dockersamples/static-site --> Baixa e executa o container mas não trava o terminal
docker container rm id-do-container --force --> Remover o container recém criado
docker ports --> Verificar as portas do container

docker run -d -P id-container / imagem -> Exibe as portas do container
docker run -d -p porta-desejada:porta-a-ser-refletida id-container / imagem --> Informa que a porta-desejada irá refletir na porta porta-a-ser-refletida do container (por exemplo: 8080:80)

Obs.: Com a flag -p, é possível fazer uma ponte entre a aplicação dentro do container e o nosso host. Este cenário é muito interessante quando queremos testar o funcionamento e como uma aplicação está interagindo com outras

docker imagens --> Lista as imagens que foram realizadas o download
docker inspect id-container --> Retorna as informações referentes aquela imagem
docker history id-container --> Exibe o histórico da imagem

docker build -t curso_docker/app-node:1.0 . --> Comando para subir a primeira imagem criada
docker build -t  cursonodejs/nginx-vim:latest .

docker run -d curso_docker/app-node:1.1 . --> Executa a imagem criada
docker run -p 9090:6000 -d curso_docker/app-node:1.2 --> Executando a imagem e alterando a porta 6000 para 9090
docker stop $(docker container ls -q) --> Para os containers que estiverem em execução
docker image rm $(docker image ls -a -d) --> Deleta as imagens do docker
docker container rm $(docker container ls -aq) --> Deleta todos os containers, inclusive os que estiverem parados
docker container rm $(docker container ls -aq) --force

docker rmi $(docker image ls -aq) --> Deleta as imagens

Obs.: A instrução ARG carrega variáveis apenas no momento de build da imagem, enquanto a instrução ENV carrega variáveis que serão utilizadas no container.

docker login -u <usuario-docker-hub> --> Autenticar usuário cadastrado

docker tag curso_docker/app-node:1.2 lpadilha/app-node:1.2 --> Criando a tag para subir a imagem no docker hub conforme o usuário
docker push lpadilha/app-node:1.0 --> Realizando o push no docker hub da imagem criada

docker ps -s --> Verifica o tamanho do container em execução
docker ps -sa --> Verifica o tamanho do container em execução e do anterior

Persistir dados utilizando bind mounts
docker run -it -v <endereco por exemplo: /home/teste/volume-docker>:/app ubuntu bash

Indicado:
docker run -it --mount type=bind,source=<endereco por exemplo: /home/teste/volume-docker>,target=<por exemplo> /app-teste> ubuntu bash

docker run --mount type=bind, source=/home/diretoria,target=/app nginx --> Criaremos um bind mount para o container baseado na imagem do nginx

Volume é mais indicado por ser gerenciado pelo docker:
docker volume ls --> Verifica se tem algum volume criado 
docker volume create <nome: por exemplo: meu-docker> --> Criar volume
docker run -it -v meu-docker:/app ubuntu bash --> Executar

docker run -it --mount source=meu-docker,target=/app ubuntu bash --> Cria volume para o container

docker run -d -p 8080:80 --mount type=bind,source="$(pwd)",target=/usr/share/nginx/html nginx

docker network ls --> Exibe as redes disponíveis para o docker
docker run -it --name <nome-container> ubuntu bash --> Nomeando o container
docker network create --driver bridge <nome-da-rede> --> Criando uma rede docker
docker run -it --name <nome-container> --network <nome-da-rede> ubuntu bash --> Executando o container na rede criada

docker rm -f $(docker ps -a) --> Deleta todas as imagens

docker run -d --network host <nome-container> --> Remove isolamentos que haviam entre a interface do container com o host. Porque
utilizando o driver host nós estamos utilizando a mesma rede, a mesma interface do host que
está hospedando esse container. Então, caso tivesse alguma outra aplicação na minha porta 3000
com meu host em execução, eu não conseguiria fazer a utilização desse container dessa maneira,
daria um problema de conflito de portas, porque a interface seria a mesma.

Exemplo prático:
docker pull mongo:4.4.6
docker pull aluradocker/alura-books:1.0
docker network create --driver bridge minha-bridge
docker run -d --network minha-bridge --name meu-mongo mongo:4.4.6
docker run -d --network minha-bridge --name alurabooks -p 3000:3000 aluradocker/alura-books:1.0
http://localhost:3000/seed
http://localhost:3000


ERROR: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
sudo service docker status
sudo service docker start

docker run -dit -p 8080:80  cursonodejs/workdir -> Executa o container em modo headless

docker run -dit -p 3000:3000 -v $(pwd)/:usr/src/app --name nodeApp node:15 bash
docker exec -it nodeApp bash

após a criação do Dockerfile (na pasta principal fora do docker)
docker build -t cursonode/hello-node .
docker run -d -p 3000:3000 cursonode/hello-node

docker-compose up -d --build
docker-compose down
docker-compose up -d

docker-compose up -d